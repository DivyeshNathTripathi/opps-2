# -*- coding: utf-8 -*-
"""OOPSAssignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mn3FzO8la5yN_O4DuusE6SQYzRUTjqfT

Q1: What is Abstraction in OOPs? Explain with an example.

**Answer**:

Abstraction is the process of hiding the implementation details and showing only the essential features of an object. It helps to focus on "what" an object does instead of "how" it does it. Abstraction is implemented using abstract classes and interfaces in OOP.

**Example:**
"""

from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def sound(self):
        pass

class Dog(Animal):
    def sound(self):
        return "Bark"

class Cat(Animal):
    def sound(self):
        return "Meow"

# Using the classes
dog = Dog()
cat = Cat()
print(dog.sound())  # Output: Bark
print(cat.sound())  # Output: Meow

"""Q2: Differentiate between Abstraction and Encapsulation. Explain with an example.

**Answer**:

**Abstraction**
1. Focuses on hiding implementation details
2. Implemented using abstract classes
3. Deals with "what to do"
**Encapsulation**
1.	Focuses on bundling data and methods
2.	Implemented using access modifiers
3.	Deals with "how to do"

**Example of Abstraction:**
"""

from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

circle = Circle(5)
print(circle.area())  # Output: 78.5

"""**Example of Encapsulation:**"""

class BankAccount:
    def __init__(self, balance):
        self.__balance = balance  # Private variable

    def deposit(self, amount):
        self.__balance += amount

    def get_balance(self):
        return self.__balance

account = BankAccount(1000)
account.deposit(500)
print(account.get_balance())  # Output: 1500

"""Q3: What is abc module in Python? Why is it used?

**Answer**:
The abc module in Python stands for Abstract Base Class. It is used to define abstract base classes in Python, which serve as blueprints for other classes. It is part of the abc module and is helpful in enforcing certain methods to be implemented in derived classes.

**Example**:
"""

from abc import ABC, abstractmethod

class Vehicle(ABC):
    @abstractmethod
    def start_engine(self):
        pass

class Car(Vehicle):
    def start_engine(self):
        return "Engine started"

car = Car()
print(car.start_engine())  # Output: Engine started

"""Q4: How can we achieve data abstraction?

**Answer:**
Data abstraction can be achieved in Python by:

1. Using Abstract Classes: Define abstract methods in base classes that must be implemented by derived classes.
2. Using Access Modifiers: Limit access to internal data using private (__) and protected (_) attributes.
**Example**:
"""

from abc import ABC, abstractmethod

class Employee(ABC):
    @abstractmethod
    def calculate_salary(self):
        pass

class Developer(Employee):
    def calculate_salary(self):
        return "Salary calculated for Developer"

developer = Developer()
print(developer.calculate_salary())  # Output: Salary calculated for Developer

"""Q5: Can we create an instance of an abstract class? Explain your answer.

**Answer:**
No, we cannot create an instance of an abstract class. Abstract classes are meant to be inherited by other classes. They serve as blueprints and may contain abstract methods that must be implemented in derived classes.

**Example:**
"""

from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def sound(self):
        pass

# Attempting to create an instance of an abstract class
# animal = Animal()  # This will raise a TypeError

class Dog(Animal):
    def sound(self):
        return "Bark"

dog = Dog()
print(dog.sound())  # Output: Bark